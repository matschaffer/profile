# Remove any unversioned files. Good for cleaning up.
svn_remove_unversioned() {
  svn st | grep -e "^\?" | nth_field 2 | xargs rm -rf
}

# List all the svn URLs that are siblings to the current URLs.
# Useful for finding alternate branches.
svn_list_siblings() {
  local base siblings sibling
  base=`svn info | grep URL | nth_field 2 | xargs dirname`
  siblings=`svn ls ${base}`
  for sibling in ${siblings}; do
    echo ${base}/${sibling}
  done
}

# Spits out a full changelog and summary file for the life of a branch.
# Useful for code review.
svn_review_branch() {
  local low_rev
  low_rev=`svn log -q --stop-on-copy "$1" | ruby -e "puts STDIN.read.scan(/r(\d+)/).last"`
  svn diff --diff-cmd diff -x -uw -r${low_rev}:HEAD > changes.diff
  echo "--This line, and those below, will be ignored--" > changes.summary
  svn diff --summarize -r${low_rev}:HEAD >> changes.summary
}

# Merges the full lifespan of a branch into the current branch
# and commit it using the branch's full log as a commit log.
svn_integrate_branch() {
  local log merge_line low_rev high_rev message

  log=`svn log --stop-on-copy`

  if echo "${log}" | grep "Integrating $1" > /dev/null; then
    merge_line=`echo "${log}" | grep "$1" | grep "svn merge"`
    low_rev=`echo ${merge_line} | cut -d: -f2 | cut -d' ' -f1`
    echo "Found previous integration of $1 up to revision ${low_rev}"
  else
    low_rev=`svn log -q --stop-on-copy "$1" | ruby -e "puts STDIN.read.scan(/r(\d+)/).last"`
    echo "Performing full branch integration starting at ${low_rev}"
  fi

  high_rev=`svn info "$1" | ruby -e "puts STDIN.read.match(/Revision: (\d+)/)[1]"`

  svn merge --non-interactive --ignore-ancestry -r${low_rev}:${high_rev} "$1"

  conflicts=`svn st | ruby -e 'puts STDIN.read.scan(/^\s*C\s+(.*)/).join("\n")' | awk '{print "  "$0}'`
  cat > svn-commit.tmp <<EOS
Integrating $1:

svn merge --ignore-ancestry -r${low_rev}:${high_rev} "$1"

Conflicts on:
$conflicts

Rally task: N/A
QC ticket: N/A
New features: None
Modified features: None
Pages affected: None

EOS

  svn log -r$(($low_rev + 1)):${high_rev} "$1" | awk '{print "  "$0}' >> svn-commit.tmp
  # svn ci -F svn-commit.tmp
}

# Moves the specified svn branch (URL) to an 'Attic' folder for deprecation.
svn_deprecate() {
  local attic
  attic="`dirname $1`/Attic"
  svn ls "${attic}" 2>&1 > /dev/null || (echo "Creating folder ${attic}..." && svn mkdir "${attic}")
  svn mv "$1" "${attic}"
}